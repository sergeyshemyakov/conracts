{"abi":[{"type":"function","name":"blockNumber","inputs":[],"outputs":[{"name":"blockNumber_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"chainId","inputs":[],"outputs":[{"name":"chainId_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"executeMessage","inputs":[{"name":"_id","type":"tuple","internalType":"struct ICrossL2Inbox.Identifier","components":[{"name":"origin","type":"address","internalType":"address"},{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"logIndex","type":"uint256","internalType":"uint256"},{"name":"timestamp","type":"uint256","internalType":"uint256"},{"name":"chainId","type":"uint256","internalType":"uint256"}]},{"name":"_target","type":"address","internalType":"address"},{"name":"_msg","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"interopStart","inputs":[],"outputs":[{"name":"interopStart_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"logIndex","inputs":[],"outputs":[{"name":"logIndex_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"origin","inputs":[],"outputs":[{"name":"origin_","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"timestamp","inputs":[],"outputs":[{"name":"timestamp_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"validateMessage","inputs":[{"name":"_id","type":"tuple","internalType":"struct ICrossL2Inbox.Identifier","components":[{"name":"origin","type":"address","internalType":"address"},{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"logIndex","type":"uint256","internalType":"uint256"},{"name":"timestamp","type":"uint256","internalType":"uint256"},{"name":"chainId","type":"uint256","internalType":"uint256"}]},{"name":"_msgHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"blockNumber()":"57e871e7","chainId()":"9a8a0592","executeMessage((address,uint256,uint256,uint256,uint256),address,bytes)":"5984c53e","interopStart()":"b1745ada","logIndex()":"da99f729","origin()":"938b5f32","timestamp()":"b80777ea","validateMessage((address,uint256,uint256,uint256,uint256),bytes32)":"ab4d6f75"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossL2Inbox.Identifier\",\"name\":\"_id\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interopStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interopStart_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"logIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"origin_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossL2Inbox.Identifier\",\"name\":\"_id\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"}],\"name\":\"validateMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blockNumber()\":{\"returns\":{\"blockNumber_\":\"The block number of the Identifier.\"}},\"chainId()\":{\"returns\":{\"chainId_\":\"The chain ID of the Identifier.\"}},\"executeMessage((address,uint256,uint256,uint256,uint256),address,bytes)\":{\"params\":{\"_id\":\"An Identifier pointing to the initiating message.\",\"_msg\":\"The message payload, matching the initiating message.\",\"_target\":\"Account that is called with _msg.\"}},\"interopStart()\":{\"returns\":{\"interopStart_\":\"interop start timestamp.\"}},\"logIndex()\":{\"returns\":{\"logIndex_\":\"The log index of the Identifier.\"}},\"origin()\":{\"returns\":{\"origin_\":\"The origin address of the Identifier.\"}},\"timestamp()\":{\"returns\":{\"timestamp_\":\"The timestamp of the Identifier.\"}},\"validateMessage((address,uint256,uint256,uint256,uint256),bytes32)\":{\"params\":{\"_id\":\"Identifier of the message.\",\"_msgHash\":\"Hash of the message payload to call target with.\"}}},\"title\":\"ICrossL2Inbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"blockNumber()\":{\"notice\":\"Returns the block number of the Identifier.\"},\"chainId()\":{\"notice\":\"Returns the chain ID of the Identifier.\"},\"executeMessage((address,uint256,uint256,uint256,uint256),address,bytes)\":{\"notice\":\"Executes a cross chain message on the destination chain.\"},\"interopStart()\":{\"notice\":\"Returns the interop start timestamp.\"},\"logIndex()\":{\"notice\":\"Returns the log index of the Identifier.\"},\"origin()\":{\"notice\":\"Returns the origin address of the Identifier.\"},\"timestamp()\":{\"notice\":\"Returns the timestamp of the Identifier.\"},\"validateMessage((address,uint256,uint256,uint256,uint256),bytes32)\":{\"notice\":\"Validates a cross chain message on the destination chain         and emits an ExecutingMessage event. This function is useful         for applications that understand the schema of the _message payload and want to         process it in a custom way.\"}},\"notice\":\"Interface for the CrossL2Inbox contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/optimism/packages/contracts-bedrock/src/L2/interfaces/ICrossL2Inbox.sol\":\"ICrossL2Inbox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":automate/=lib/optimism/packages/contracts-bedrock/lib/automate/contracts/\",\":ds-test/=lib/optimism/packages/contracts-bedrock/lib/solady/lib/ds-test/src/\",\":erc4626-tests/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-v5/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/optimism/packages/contracts-bedrock/lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/optimism/packages/contracts-bedrock/lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v5/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-v5/\",\":openzeppelin-contracts/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts/\",\":optimism/=lib/optimism/\",\":prb-test/=lib/optimism/packages/contracts-bedrock/lib/automate/lib/prb-test/src/\",\":safe-contracts/=lib/optimism/packages/contracts-bedrock/lib/safe-contracts/contracts/\",\":solady/=lib/optimism/packages/contracts-bedrock/lib/solady/\",\":solmate/=lib/optimism/packages/contracts-bedrock/lib/solmate/src/\"]},\"sources\":{\"lib/optimism/packages/contracts-bedrock/src/L2/interfaces/ICrossL2Inbox.sol\":{\"keccak256\":\"0x8c4eb2ecdec5a8f8a9613ad60ee7c32a57c46626c314dc25cc7698c548add4a8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548273ceac0c77aa6894f9408ff0a9ea8276cc2e932a97a95e3040587f9f43ae\",\"dweb:/ipfs/QmYjEpkKQy6K5jTDjXLMMDrfSfeQeVvFJpmP7hAP4arESR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"blockNumber","outputs":[{"internalType":"uint256","name":"blockNumber_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"chainId","outputs":[{"internalType":"uint256","name":"chainId_","type":"uint256"}]},{"inputs":[{"internalType":"struct ICrossL2Inbox.Identifier","name":"_id","type":"tuple","components":[{"internalType":"address","name":"origin","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"logIndex","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"chainId","type":"uint256"}]},{"internalType":"address","name":"_target","type":"address"},{"internalType":"bytes","name":"_msg","type":"bytes"}],"stateMutability":"payable","type":"function","name":"executeMessage"},{"inputs":[],"stateMutability":"view","type":"function","name":"interopStart","outputs":[{"internalType":"uint256","name":"interopStart_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"logIndex","outputs":[{"internalType":"uint256","name":"logIndex_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"origin","outputs":[{"internalType":"address","name":"origin_","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"timestamp","outputs":[{"internalType":"uint256","name":"timestamp_","type":"uint256"}]},{"inputs":[{"internalType":"struct ICrossL2Inbox.Identifier","name":"_id","type":"tuple","components":[{"internalType":"address","name":"origin","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"logIndex","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"chainId","type":"uint256"}]},{"internalType":"bytes32","name":"_msgHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"validateMessage"}],"devdoc":{"kind":"dev","methods":{"blockNumber()":{"returns":{"blockNumber_":"The block number of the Identifier."}},"chainId()":{"returns":{"chainId_":"The chain ID of the Identifier."}},"executeMessage((address,uint256,uint256,uint256,uint256),address,bytes)":{"params":{"_id":"An Identifier pointing to the initiating message.","_msg":"The message payload, matching the initiating message.","_target":"Account that is called with _msg."}},"interopStart()":{"returns":{"interopStart_":"interop start timestamp."}},"logIndex()":{"returns":{"logIndex_":"The log index of the Identifier."}},"origin()":{"returns":{"origin_":"The origin address of the Identifier."}},"timestamp()":{"returns":{"timestamp_":"The timestamp of the Identifier."}},"validateMessage((address,uint256,uint256,uint256,uint256),bytes32)":{"params":{"_id":"Identifier of the message.","_msgHash":"Hash of the message payload to call target with."}}},"version":1},"userdoc":{"kind":"user","methods":{"blockNumber()":{"notice":"Returns the block number of the Identifier."},"chainId()":{"notice":"Returns the chain ID of the Identifier."},"executeMessage((address,uint256,uint256,uint256,uint256),address,bytes)":{"notice":"Executes a cross chain message on the destination chain."},"interopStart()":{"notice":"Returns the interop start timestamp."},"logIndex()":{"notice":"Returns the log index of the Identifier."},"origin()":{"notice":"Returns the origin address of the Identifier."},"timestamp()":{"notice":"Returns the timestamp of the Identifier."},"validateMessage((address,uint256,uint256,uint256,uint256),bytes32)":{"notice":"Validates a cross chain message on the destination chain         and emits an ExecutingMessage event. This function is useful         for applications that understand the schema of the _message payload and want to         process it in a custom way."}},"version":1}},"settings":{"remappings":["automate/=lib/optimism/packages/contracts-bedrock/lib/automate/contracts/","ds-test/=lib/optimism/packages/contracts-bedrock/lib/solady/lib/ds-test/src/","erc4626-tests/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-v5/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/optimism/packages/contracts-bedrock/lib/kontrol-cheatcodes/src/","lib-keccak/=lib/optimism/packages/contracts-bedrock/lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v5/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts-v5/","openzeppelin-contracts/=lib/optimism/packages/contracts-bedrock/lib/openzeppelin-contracts/","optimism/=lib/optimism/","prb-test/=lib/optimism/packages/contracts-bedrock/lib/automate/lib/prb-test/src/","safe-contracts/=lib/optimism/packages/contracts-bedrock/lib/safe-contracts/contracts/","solady/=lib/optimism/packages/contracts-bedrock/lib/solady/","solmate/=lib/optimism/packages/contracts-bedrock/lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/optimism/packages/contracts-bedrock/src/L2/interfaces/ICrossL2Inbox.sol":"ICrossL2Inbox"},"evmVersion":"paris","libraries":{}},"sources":{"lib/optimism/packages/contracts-bedrock/src/L2/interfaces/ICrossL2Inbox.sol":{"keccak256":"0x8c4eb2ecdec5a8f8a9613ad60ee7c32a57c46626c314dc25cc7698c548add4a8","urls":["bzz-raw://548273ceac0c77aa6894f9408ff0a9ea8276cc2e932a97a95e3040587f9f43ae","dweb:/ipfs/QmYjEpkKQy6K5jTDjXLMMDrfSfeQeVvFJpmP7hAP4arESR"],"license":"MIT"}},"version":1},"id":24}